terminamos con la piedra papel o tijeras. 

codigo



package com.utn.vista;

import java.util.InputMismatchException;

import javax.swing.JOptionPane;

public class TijeraMatriz {

	static int com;
	static int jugador;

	public static void main(String[] args) {

		juego();
		
	}
	public static void juego() {
		int[][] jugadas = new int[3][3];
		jugadas[0][0] = 0;
		jugadas[1][1] = 0;
		jugadas[2][2] = 0;
		jugadas[1][0] = 1;
		jugadas[2][1] = 1;
		jugadas[0][2] = 1;
		jugadas[0][1] = 2;
		jugadas[1][2] = 2;
		jugadas[2][0] = 2;
		String [] nombres= {"piedra", "papel", "tijeras"};
		
		com = 0;
		jugador = 0;
		
		
		while(com<2 && jugador<2) {
		
		try {
		int pedo2 = Integer.parseInt(JOptionPane.showInputDialog("Cual es su jugada.\n1 para piedra\n2 para papel\n3 para tijera")) -1;
		
		int comPedo = (int) (Math.random()*3);
		JOptionPane.showMessageDialog(null, "usted ha elegido: " + nombres[pedo2] + "\ncom ha elegido: " + nombres[comPedo]);
		switch(jugadas[pedo2][comPedo]) {
		case 0:
			JOptionPane.showMessageDialog(null, "empate");
						break;
		case 1:
			JOptionPane.showMessageDialog(null, "Ha ganado el usted");
			jugador++;
			break;
		case 2:
			JOptionPane.showMessageDialog(null, "Ha ganado el sepeu");
			com++;
			break;
		default:
			JOptionPane.showMessageDialog(null, "lo rompiste capo \n+kpo");
		}
		}catch (Exception e) { // if an exception appears prints message below
	        System.err.println("Please enter a number! " + e.getMessage());
	        continue; // continues to loop if exception is found
	    }
		}
		JOptionPane.showMessageDialog(null, com==2?"Te gano el cpu gg":"Ea! Ganaste");
	  
	    	
		}
}


POO Programacion orientada a objetos. 
POO caracteristicas
poder reutilizar y reescribir codigo de forma mas eficiente y simple. (? 
Algo que podemos representar de una manera

tiene un estado, un comportamiento y una identidad. En programacion
Tiene que poder tomar acciones, tener un nombre. (Como una variable) pero ademas tiene un estado y distintos comportambientos ;)

Que es una clase. conjunto de objetos que comparten una estructura. ejepmlo del auto 

Atributos y metodos de la clase static

Se puede aplicar a tributos o metodos dentro de una clase. Es una variable que responde a clase y no instancia. la variable a nivel de clase aplicara a todas las instancias
(por lo tanto static aplica a todas las instancias dentro de una clase.) 
Sirve para algo que se que implica a todo dentro de una clase
Pero varaibles que tienen que modificarse, como la patente, en el ejemplo de autos, no deberia ser static, porque tienen necesariamente valores diferentes. 
Variable o metodo que responde a static es una sola. Por mas que haya 100000*10000 objetos, static actua sobre todos los que tenga... sobre los que este relacionado.
Ejemplo de una clase

public class ejemplo {
private int numEjemplo;         |
private String nombreEjemplo;   | atributos. 
public ejemplo(){
}
public ejemplo (int numEjemplo, String nombreEjemplo) 

masaka
  ___________________________________
 /				     \
 | clases instancias, CONSTRUCTORES  |
 \___________________________________/

toString() es como un objeto que sirve para todos los objects. Todas las clases que creemos podrian utilizar ese metodo. 
no entiendo bien porq
pero bueno
@override 

no explico
con override dice que no preste atencion a clase object, sino que preste atencion a lo que viene despues. porque toString ya existe mas arriba. 

pensar las clases como un nuevo tipo de datos. como int o String, bueno, tambien TijeraMatriz puede ser!!! cheeeeaaaa
el parentesis dentro de new TijeraMatriz """"()"""" en realidad lo que llamo es un metodo constructor de una clase. Dentro de una clase, siempre se crea un metodo que se llama
como se llame que esta vacio. 
eso
vuelto a explicar
"this." hace referencia a tomar el parametro de esa instancia. 

super();  : va arriba en la jerarqua, al constructor. Primero llama al constructor original de la clase y despues completa con parametros. 
es necesario hacer un constructor vacio primero. Sino java no compilara bien. 
siempre tiene que llamarse public+nombre_de_la_clase (){
otra caracteristica: no tiene que devolver ningun valor
la secuencia cuadno se hace memoria
Primero asigna la memoria para el objeto. Despues le damos valores. despues llama al constructor de la clase. 
Siempre hacer un constructor vacio cuando haga una instancia de un objeto. 
hay varias formas de instanciar un objeto. Con un parametro como metodo, o en varios renglones

pilares de POO

abstraccion
modularidad
encapsulamiento
herencia
polimorfismo

1 abstraccion
abstraccion, cada usuario puede ver un gat ode distinta manera, el objetivo es encontrar las caracteristicas escenciales de un bojeto en relacion a la perspectiva del observador

2 modularidad
descomposicion que uno debera ir haciendo de cada clase, de cada objeto. Por ejemplo, la descomposicion de objeto auto depende en gran parte del programador, que tiene que 
ponderar en base de lo que quiere programar. Poder hacer clases bien divididas hacen a una buena modularidad
casos de uso y diagrama de clases en UML

3- encapsulamiento


